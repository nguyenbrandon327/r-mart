name: Build and Push Backend to ECR

on:
  push:
    branches:
      - '**'
    paths:
      - 'backend/**'

env:
  ECR_REPOSITORY: r-mart-backend
  ECS_CLUSTER: rmart-cluster
  ECS_SERVICE: rmart-task-service-sw4ysulk
  ECS_CONTAINER_NAME: r-mart-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ECR_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists (idempotent)
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 || \
          aws ecr create-repository \
            --repository-name "${{ env.ECR_REPOSITORY }}" \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256

      - name: Build, tag, and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_SHA: ${{ github.sha }}
        run: |
          echo "Registry: $ECR_REGISTRY"
          echo "Repository: $ECR_REPOSITORY"
          echo "Commit SHA: $IMAGE_SHA"

          # Build from backend/Dockerfile with backend as context
          docker build -t "$ECR_REPOSITORY:$IMAGE_SHA" -f backend/Dockerfile backend

          # Tag for ECR (both commit SHA and latest)
          docker tag "$ECR_REPOSITORY:$IMAGE_SHA" "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA"
          docker tag "$ECR_REPOSITORY:$IMAGE_SHA" "$ECR_REGISTRY/$ECR_REPOSITORY:latest"

          # Push
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Output image URIs
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_SHA: ${{ github.sha }}
        run: |
          echo "Pushed: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA"
          echo "Pushed: $ECR_REGISTRY/$ECR_REPOSITORY:latest"

      - name: Deploy to ECS (update service with new task definition)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_SHA: ${{ github.sha }}
          ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
          ECS_CONTAINER_NAME: ${{ env.ECS_CONTAINER_NAME }}
        run: |
          set -euo pipefail

          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SHA"
          echo "Deploying image: $IMAGE_URI to $ECS_CLUSTER/$ECS_SERVICE (container: $ECS_CONTAINER_NAME)"

          # 1) Get current task definition ARN used by the service
          CURRENT_TD_ARN=$(aws ecs describe-services \
            --cluster "$ECS_CLUSTER" \
            --services "$ECS_SERVICE" \
            --query 'services[0].taskDefinition' \
            --output text)
          echo "Current task definition: $CURRENT_TD_ARN"

          # 2) Download current task definition JSON
          aws ecs describe-task-definition \
            --task-definition "$CURRENT_TD_ARN" \
            --query 'taskDefinition' > task-def.json

          # 3) Create a new task definition JSON with only allowed fields and updated image
          jq --arg IMAGE "$IMAGE_URI" --arg NAME "$ECS_CONTAINER_NAME" '
            .containerDefinitions |= (map(if .name == $NAME then .image = $IMAGE | . else . end)) |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)
          ' task-def.json > new-task-def.json

          echo "Registering new task definition revision..."
          NEW_TD_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "New task definition: $NEW_TD_ARN"

          echo "Updating ECS service..."
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "$NEW_TD_ARN" \
            --force-new-deployment >/dev/null

          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
          echo "Deployment complete."


